MODULE main
  VAR
    -- top-level shared state
    HIGH     : boolean;     -- high-value
    LOW      : boolean;     -- low-value
    var_X    : boolean;     -- X
    var_Y    : boolean;     -- Y
    SCHEDULE : 0..2;        -- 0:p1 moves, 1:p2 moves, 2:p3 moves
    ID_one   : 0..2;
    ID_two   : 0..2;
    ID_three : 0..2;

    -- inlined programs(ID_one, SCHEDULE, LOW, HIGH, var_X, var_Y, initline=1) as proc1
    proc1_line : 0..12;

    -- inlined programs(ID_two, SCHEDULE, LOW, HIGH, var_X, var_Y, initline=6) as proc2
    proc2_line : 0..12;

    -- inlined programs(ID_three, SCHEDULE, LOW, HIGH, var_X, var_Y, initline=9) as proc3
    proc3_line : 0..12;

  ASSIGN
    -- IDs are fixed
    init(ID_one)   := 0;
    next(ID_one)   := 0;
    init(ID_two)   := 1;
    next(ID_two)   := 1;
    init(ID_three) := 2;
    next(ID_three) := 2;

    -- inputs toggled by proc3
    init(HIGH) := FALSE;
    next(HIGH) :=
      case
        (proc3_line = 10) : {TRUE, FALSE};
        TRUE              : HIGH;
      esac;

    init(LOW) := FALSE;
    next(LOW) :=
      case
        (proc3_line = 11) : {TRUE};  -- sequence LOW: 0 -> 1
        TRUE              : LOW;
      esac;

    -- X/Y updated by proc1
    init(var_X) := FALSE;
    next(var_X) :=
      case
        (proc1_line = 0)                    : {FALSE};
        (proc1_line = 2 | proc1_line = 5)   : {TRUE};
        TRUE                                : var_X;
      esac;

    init(var_Y) := FALSE;
    next(var_Y) :=
      case
        (proc1_line = 0)                    : {FALSE};
        (proc1_line = 3 | proc1_line = 4)   : {TRUE};
        TRUE                                : var_Y;
      esac;

    --------------------------------------------------------------------------
    -- Inlined programs(..., initline=1)  -> proc1_line
    --------------------------------------------------------------------------
    init(proc1_line) := 1;
    next(proc1_line) :=
      case
        -- scheduler gate: if not this programâ€™s turn, it stutters
        !(SCHEDULE = ID_one)                         : proc1_line;

        -- program1 (lines 0..5)
        (proc1_line = 0)                             : {1};        -- x=0, y=0
        (proc1_line = 1 & (HIGH = LOW))              : {2};        -- if (h == l)
        (proc1_line = 2)                             : {3};        -- x=1
        (proc1_line = 3)                             : {0};        -- y=1
        (proc1_line = 1 & !(HIGH = LOW))             : {4};
        (proc1_line = 4)                             : {5};        -- y=1
        (proc1_line = 5)                             : {0};        -- x=1

        -- program2 (lines 6..8)
        (proc1_line = 6)                             : {7};
        (proc1_line = 7)                             : {8};        -- output x
        (proc1_line = 8)                             : {6};        -- output y

        -- program3 (lines 9..11)
        (proc1_line = 9)                             : {10};
        (proc1_line = 10)                            : {11};       -- HIGH := {0,1} at top level
        (proc1_line = 11)                            : {9};        -- LOW  := 1 at top level (per your case)

        TRUE                                         : proc1_line;
      esac;

    --------------------------------------------------------------------------
    -- Inlined programs(..., initline=6)  -> proc2_line
    --------------------------------------------------------------------------
    init(proc2_line) := 6;
    next(proc2_line) :=
      case
        !(SCHEDULE = ID_two)                         : proc2_line;

        (proc2_line = 0)                             : {1};
        (proc2_line = 1 & (HIGH = LOW))              : {2};
        (proc2_line = 2)                             : {3};
        (proc2_line = 3)                             : {0};
        (proc2_line = 1 & !(HIGH = LOW))             : {4};
        (proc2_line = 4)                             : {5};
        (proc2_line = 5)                             : {0};

        (proc2_line = 6)                             : {7};
        (proc2_line = 7)                             : {8};        -- output x
        (proc2_line = 8)                             : {6};        -- output y

        (proc2_line = 9)                             : {10};
        (proc2_line = 10)                            : {11};
        (proc2_line = 11)                            : {9};

        TRUE                                         : proc2_line;
      esac;

    --------------------------------------------------------------------------
    -- Inlined programs(..., initline=9)  -> proc3_line
    --------------------------------------------------------------------------
    init(proc3_line) := 9;
    next(proc3_line) :=
      case
        !(SCHEDULE = ID_three)                       : proc3_line;

        (proc3_line = 0)                             : {1};
        (proc3_line = 1 & (HIGH = LOW))              : {2};
        (proc3_line = 2)                             : {3};
        (proc3_line = 3)                             : {0};
        (proc3_line = 1 & !(HIGH = LOW))             : {4};
        (proc3_line = 4)                             : {5};
        (proc3_line = 5)                             : {0};

        (proc3_line = 6)                             : {7};
        (proc3_line = 7)                             : {8};
        (proc3_line = 8)                             : {6};

        (proc3_line = 9)                             : {10};
        (proc3_line = 10)                            : {11};       -- HIGH := {0,1} at top level
        (proc3_line = 11)                            : {9};        -- LOW  := 1 at top level

        TRUE                                         : proc3_line;
      esac;

  DEFINE
    -- the observables (now referencing inlined proc2)
    obs_X_is_zero := ((proc2_line = 7) & (var_X = FALSE));
    obs_X_is_one  := ((proc2_line = 7) & (var_X = TRUE));
    obs_Y_is_zero := ((proc2_line = 8) & (var_Y = FALSE));
    obs_Y_is_one  := ((proc2_line = 8) & (var_Y = TRUE));

    -- halt condition from original DEFINE
    halt := ((proc1_line = 5) & (proc2_line = 8) & (proc3_line = 11));