MODULE main
  VAR
    offset   : 0..2;
    var_Y    : 0..7;
    var_size : 0..4;
    k        : 0..4;

    -- proc1 (program(0, var_Y, var_size, offset, k))
    proc1_line : 0..9;

    proc1_arrA_pos0 : 0..4;
    proc1_arrA_pos1 : 0..4;
    proc1_arrA_pos2 : 0..4;
    proc1_arrA_pos3 : 0..4;
    proc1_arrA_pos4 : 0..4;

    proc1_arrB_pos0 : 0..4;
    proc1_arrB_pos1 : 0..4;
    proc1_arrB_pos2 : 0..4;
    proc1_arrB_pos3 : 0..4;
    proc1_arrB_pos4 : 0..4;

    proc1_var_temp_proc1 : 0..4;
    proc1_check_Ay_eq_k  : boolean;

    proc1_var_X          : boolean;
    proc1_var_Z          : 0..4;
    proc1_var_W          : 0..4;
    proc1_var_temp_proc2 : 0..4;
    proc1_mask           : 0..1;
    proc1_halt           : boolean;

    -- proc2 (program(3, var_Y, var_size, offset, k))
    proc2_line : 0..9;

    proc2_arrA_pos0 : 0..4;
    proc2_arrA_pos1 : 0..4;
    proc2_arrA_pos2 : 0..4;
    proc2_arrA_pos3 : 0..4;
    proc2_arrA_pos4 : 0..4;

    proc2_arrB_pos0 : 0..4;
    proc2_arrB_pos1 : 0..4;
    proc2_arrB_pos2 : 0..4;
    proc2_arrB_pos3 : 0..4;
    proc2_arrB_pos4 : 0..4;

    proc2_var_temp_proc1 : 0..4;
    proc2_check_Ay_eq_k  : boolean;

    proc2_var_X          : boolean;
    proc2_var_Z          : 0..4;
    proc2_var_W          : 0..4;
    proc2_var_temp_proc2 : 0..4;
    proc2_mask           : 0..1;
    proc2_halt           : boolean;

  ASSIGN
    ----------------------------------------------------------------
    -- main vars
    ----------------------------------------------------------------
    next(offset)   := offset;   -- (init(offset) commented out per input)
    next(var_Y)    := var_Y;    -- (init(var_Y) commented out per input)
    init(var_size) := 4;
    next(var_size) := var_size;

    init(k) := 3;
    next(k) := k;

    ----------------------------------------------------------------
    -- proc1: program(0, var_Y, var_size, offset, k)
    ----------------------------------------------------------------
    init(proc1_halt) := FALSE;
    next(proc1_halt) :=
      case
        (proc1_line = 3 | proc1_line = 9) : TRUE;
        TRUE : FALSE;
      esac;

    init(proc1_check_Ay_eq_k) :=
         (var_Y = 0 & k = 0) | (var_Y = 1 & k = 1)
      |  (var_Y = 2 & k = 2) | (var_Y = 3 & k = 3)
      |  (var_Y = 4 & k = 4) | (var_Y = 5 & k = 5)
      |  (var_Y = 6 & k = 6) | (var_Y = 7 & k = 7);
    next(proc1_check_Ay_eq_k) := proc1_check_Ay_eq_k;

    init(proc1_mask) := 0;
    next(proc1_mask) :=
      case
        ((proc1_line = 2) & !(proc1_var_X)) : 0;
        ((proc1_line = 2) &  (proc1_var_X)) : 1;
        TRUE : proc1_mask;
      esac;

    init(proc1_var_temp_proc1) := 0;
    next(proc1_var_temp_proc1) :=
      case
        (proc1_line = 2 & ((var_Y + offset) = 0)) : { proc1_arrB_pos0 };
        (proc1_line = 2 & ((var_Y + offset) = 1)) : { proc1_arrB_pos1 };
        (proc1_line = 2 & ((var_Y + offset) = 2)) : { proc1_arrB_pos2 };
        (proc1_line = 2 & ((var_Y + offset) = 3)) : { proc1_arrB_pos3 };
        (proc1_line = 2 & ((var_Y + offset) = 4)) : { proc1_arrB_pos4 };
        TRUE : proc1_var_temp_proc1;
      esac;

    init(proc1_line) := 0;  -- initline
    next(proc1_line) :=
      case
        -- program1
        (proc1_line = 0 & (var_Y >= var_size)) : {3}; -- terminate
        (proc1_line = 0 & (var_Y <  var_size)) : {1}; -- proceed
        (proc1_line = 1 & !proc1_check_Ay_eq_k) : {3};
        (proc1_line = 1 &  proc1_check_Ay_eq_k) : {2};
        (proc1_line = 2) : {3};
        (proc1_line = 3) : {3};

        -- program2
        (proc1_line = 4) : {5};
        (proc1_line = 5 & (!proc1_var_X)) : {9};
        (proc1_line = 5 &  (proc1_var_X)) : {6};
        (proc1_line = 6) : {7}; -- load z
        (proc1_line = 7) : {8}; -- shift pointer
        (proc1_line = 8) : {9}; -- load w
        (proc1_line = 9) : {9};

        TRUE : proc1_line;
      esac;

    init(proc1_var_X) := FALSE;
    next(proc1_var_X) :=
      case
        (proc1_line = 4) : (var_Y < var_size);
        TRUE : proc1_var_X;
      esac;

    init(proc1_var_Z) := 0;
    next(proc1_var_Z) :=
      case
        -- load z: only var_Y=1..4 present in this module
        ((proc1_line = 6) & (var_Y = 1)) : { proc1_arrA_pos1 };
        ((proc1_line = 6) & (var_Y = 2)) : { proc1_arrA_pos2 };
        ((proc1_line = 6) & (var_Y = 3)) : { proc1_arrA_pos3 };
        ((proc1_line = 6) & (var_Y = 4)) : { proc1_arrA_pos4 };

        -- shift pointer
        ((proc1_line = 7) & (proc1_var_Z < 3) & (offset = 0)) : { proc1_var_Z + 0 };
        ((proc1_line = 7) & (proc1_var_Z < 3) & (offset = 1)) : { proc1_var_Z + 1 };
        ((proc1_line = 7) & (proc1_var_Z < 3) & (offset = 2)) : { proc1_var_Z + 2 };
        ((proc1_line = 7) & (proc1_var_Z >= 3)) : { 4 };

        TRUE : proc1_var_Z;
      esac;

    init(proc1_var_W) := 0;
    next(proc1_var_W) :=
      case
        ((proc1_line = 8) & (proc1_var_Z = 0)) : { proc1_arrB_pos0 };
        ((proc1_line = 8) & (proc1_var_Z = 1)) : { proc1_arrB_pos1 };
        ((proc1_line = 8) & (proc1_var_Z = 2)) : { proc1_arrB_pos2 };
        ((proc1_line = 8) & (proc1_var_Z = 3)) : { proc1_arrB_pos3 };
        ((proc1_line = 8) & (proc1_var_Z = 4)) : { proc1_arrB_pos4 };
        TRUE : proc1_var_W;
      esac;

    init(proc1_var_temp_proc2) := 0;
    next(proc1_var_temp_proc2) :=
      case
        (proc1_line = 9) : { proc1_var_W };
        TRUE : proc1_var_temp_proc2;
      esac;

    -- static arrays for proc1
    init(proc1_arrA_pos0) := 0; next(proc1_arrA_pos0) := proc1_arrA_pos0;
    init(proc1_arrA_pos1) := 1; next(proc1_arrA_pos1) := proc1_arrA_pos1;
    init(proc1_arrA_pos2) := 2; next(proc1_arrA_pos2) := proc1_arrA_pos2;
    init(proc1_arrA_pos3) := 3; next(proc1_arrA_pos3) := proc1_arrA_pos3;
    init(proc1_arrA_pos4) := 4; next(proc1_arrA_pos4) := proc1_arrA_pos4;

    init(proc1_arrB_pos0) := 0; next(proc1_arrB_pos0) := proc1_arrB_pos0;
    init(proc1_arrB_pos1) := 1; next(proc1_arrB_pos1) := proc1_arrB_pos1;
    init(proc1_arrB_pos2) := 2; next(proc1_arrB_pos2) := proc1_arrB_pos2;
    init(proc1_arrB_pos3) := 3; next(proc1_arrB_pos3) := proc1_arrB_pos3;
    init(proc1_arrB_pos4) := 4; next(proc1_arrB_pos4) := proc1_arrB_pos4;

    ----------------------------------------------------------------
    -- proc2: program(3, var_Y, var_size, offset, k)
    ----------------------------------------------------------------
    init(proc2_halt) := FALSE;
    next(proc2_halt) :=
      case
        (proc2_line = 3 | proc2_line = 9) : TRUE;
        TRUE : FALSE;
      esac;

    init(proc2_check_Ay_eq_k) :=
         (var_Y = 0 & k = 0) | (var_Y = 1 & k = 1)
      |  (var_Y = 2 & k = 2) | (var_Y = 3 & k = 3)
      |  (var_Y = 4 & k = 4) | (var_Y = 5 & k = 5)
      |  (var_Y = 6 & k = 6) | (var_Y = 7 & k = 7);
    next(proc2_check_Ay_eq_k) := proc2_check_Ay_eq_k;

    init(proc2_mask) := 0;
    next(proc2_mask) :=
      case
        ((proc2_line = 2) & !(proc2_var_X)) : 0;
        ((proc2_line = 2) &  (proc2_var_X)) : 1;
        TRUE : proc2_mask;
      esac;

    init(proc2_var_temp_proc1) := 0;
    next(proc2_var_temp_proc1) :=
      case
        (proc2_line = 2 & ((var_Y + offset) = 0)) : { proc2_arrB_pos0 };
        (proc2_line = 2 & ((var_Y + offset) = 1)) : { proc2_arrB_pos1 };
        (proc2_line = 2 & ((var_Y + offset) = 2)) : { proc2_arrB_pos2 };
        (proc2_line = 2 & ((var_Y + offset) = 3)) : { proc2_arrB_pos3 };
        (proc2_line = 2 & ((var_Y + offset) = 4)) : { proc2_arrB_pos4 };
        TRUE : proc2_var_temp_proc1;
      esac;

    init(proc2_line) := 3;  -- initline
    next(proc2_line) :=
      case
        -- program1
        (proc2_line = 0 & (var_Y >= var_size)) : {3};
        (proc2_line = 0 & (var_Y <  var_size)) : {1};
        (proc2_line = 1 & !proc2_check_Ay_eq_k) : {3};
        (proc2_line = 1 &  proc2_check_Ay_eq_k) : {2};
        (proc2_line = 2) : {3};
        (proc2_line = 3) : {3};

        -- program2
        (proc2_line = 4) : {5};
        (proc2_line = 5 & (!proc2_var_X)) : {9};
        (proc2_line = 5 &  (proc2_var_X)) : {6};
        (proc2_line = 6) : {7}; -- load z
        (proc2_line = 7) : {8}; -- shift pointer
        (proc2_line = 8) : {9}; -- load w
        (proc2_line = 9) : {9};

        TRUE : proc2_line;
      esac;

    init(proc2_var_X) := FALSE;
    next(proc2_var_X) :=
      case
        (proc2_line = 4) : (var_Y < var_size);
        TRUE : proc2_var_X;
      esac;

    init(proc2_var_Z) := 0;
    next(proc2_var_Z) :=
      case
        ((proc2_line = 6) & (var_Y = 1)) : { proc2_arrA_pos1 };
        ((proc2_line = 6) & (var_Y = 2)) : { proc2_arrA_pos2 };
        ((proc2_line = 6) & (var_Y = 3)) : { proc2_arrA_pos3 };
        ((proc2_line = 6) & (var_Y = 4)) : { proc2_arrA_pos4 };

        ((proc2_line = 7) & (proc2_var_Z < 3) & (offset = 0)) : { proc2_var_Z + 0 };
        ((proc2_line = 7) & (proc2_var_Z < 3) & (offset = 1)) : { proc2_var_Z + 1 };
        ((proc2_line = 7) & (proc2_var_Z < 3) & (offset = 2)) : { proc2_var_Z + 2 };
        ((proc2_line = 7) & (proc2_var_Z >= 3)) : { 4 };

        TRUE : proc2_var_Z;
      esac;

    init(proc2_var_W) := 0;
    next(proc2_var_W) :=
      case
        ((proc2_line = 8) & (proc2_var_Z = 0)) : { proc2_arrB_pos0 };
        ((proc2_line = 8) & (proc2_var_Z = 1)) : { proc2_arrB_pos1 };
        ((proc2_line = 8) & (proc2_var_Z = 2)) : { proc2_arrB_pos2 };
        ((proc2_line = 8) & (proc2_var_Z = 3)) : { proc2_arrB_pos3 };
        ((proc2_line = 8) & (proc2_var_Z = 4)) : { proc2_arrB_pos4 };
        TRUE : proc2_var_W;
      esac;

    init(proc2_var_temp_proc2) := 0;
    next(proc2_var_temp_proc2) :=
      case
        (proc2_line = 9) : { proc2_var_W };
        TRUE : proc2_var_temp_proc2;
      esac;

    -- static arrays for proc2
    init(proc2_arrA_pos0) := 0; next(proc2_arrA_pos0) := proc2_arrA_pos0;
    init(proc2_arrA_pos1) := 1; next(proc2_arrA_pos1) := proc2_arrA_pos1;
    init(proc2_arrA_pos2) := 2; next(proc2_arrA_pos2) := proc2_arrA_pos2;
    init(proc2_arrA_pos3) := 3; next(proc2_arrA_pos3) := proc2_arrA_pos3;
    init(proc2_arrA_pos4) := 4; next(proc2_arrA_pos4) := proc2_arrA_pos4;

    init(proc2_arrB_pos0) := 0; next(proc2_arrB_pos0) := proc2_arrB_pos0;
    init(proc2_arrB_pos1) := 1; next(proc2_arrB_pos1) := proc2_arrB_pos1;
    init(proc2_arrB_pos2) := 2; next(proc2_arrB_pos2) := proc2_arrB_pos2;
    init(proc2_arrB_pos3) := 3; next(proc2_arrB_pos3) := proc2_arrB_pos3;
    init(proc2_arrB_pos4) := 4; next(proc2_arrB_pos4) := proc2_arrB_pos4;
